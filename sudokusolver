def solve(board): # solve board
    find = find_empty(board)
    # base case
    if not find: 
        return True
    else:
        row, col = find # set row and col to find
    
    # recursive case
    for i in range(1, 10): # try values 1-9
        if valid(board, i, (row, col)): # if the number is valid the specific spot
            board[row][col] = i # set the specific spot to the number
            if solve(board): # use method to check if board was solved
                return True # return true
            board[row][col] = 0

    return False # return false


def valid(board, number, position):
    # check row
    for i in range(len(board[0])):
        if board[position[0]][i] == number and position[1] != i:
            return False
    
    # check col
    for i in range(len(board)):
        if board[i][position[1]] == number and position[0] != i:
            return False
    
    # check box
    box_x = position[1] // 3
    box_y = position[0] // 3
    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if board[i][j] == number and (i, j) != position:
                return False

    # if none of the checks result in an invalidity, return true
    return True

# prints board to console

def print_board(board):
    for i in range(len(board)):
        if i % 3 == 0 and i != 0: 
            print("- - - - - - - - - - - - ")
        for j in range(len(board[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")
            if j == 8: # if you reach the last sudoku grid spot print the board
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="") # sudoku is made up of 9 small 3x3 grids spot each 3x3 the outline is made bolder

# finds next empty location in the board

def find_empty(board):
    for i in range(len(board)): # iterate
        for j in range(len(board[0])): # iterate
            if board[i][j] == 0: # find empty spot
                return (i, j) # return empty spot
    return None # if no empty spots found return none
